var documenterSearchIndex = {"docs":
[{"location":"#SuiteSparseGraphBLAS.jl","page":"Introduction","title":"SuiteSparseGraphBLAS.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"SuiteSparseGraphBLAS.jl is a WIP package for sparse linear algebra on arbitrary semirings, with a particular focus on graph computations. It aims to provide a Julian wrapper over Tim Davis' SuiteSparse reference implementation of the GraphBLAS C specification.","category":"page"},{"location":"#Roadmap","page":"Introduction","title":"Roadmap","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"While the core library is mostly complete, and all GraphBLAS functionality is present, there are still quite a few features being worked on for v1.0:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"ChainRules.jl integration for AD.\nComplete SparseArrays and ArrayInterface interfaces.\nImport and Export in all formats including bitmap and csr. Currently only dense and csc are supported.\nPrinting v2.\nUser-defined types and functions.\nAlternative syntax for GraphBLAS ops (currently must use BinaryOps.PLUS instead of +).\nComplex builtins.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Once these are completed there will be a v1.0 release, with the goal being JuliaCon 2021.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Post 1.0 goals include:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"LightGraphs integration.\nGeometricFlux or other graph machine learning framework integration.\nMore efficient import and export between Julia and GraphBLAS\nSupport for other GraphBLAS implementations in a follow-up GraphBLAS.jl","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"!!! warning Printing      Printing is done directly by GraphBLAS in this release. This means printed indices are 0-based, and the displayed type is the equivalent C type. The v1.0 release will alleviate this issue.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Install using the Julia package manager in the REPL:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"] add SuiteSparseGraphBLAS#master","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"or with Pkg","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Pkg\nPkg.add(\"SuiteSparseGraphBLAS\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The SuiteSparse:GraphBLAS binary is installed automatically as SSGraphBLAS_jll.","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"GraphBLAS harnesses the well-understood duality between graphs and matrices.  Specifically a graph can be represented by its adjacency matrix, incidence matrix, or the many variations on those formats.  With this matrix representation in hand we have a method to operate on the graph using linear algebra operations on the matrix.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Below is an example of the adjacency matrix of a directed graph, and finding the neighbors of a single vertex using basic matrix-vector multiplication on the arithemtic semiring.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: BFS and Adjacency Matrix)","category":"page"},{"location":"#GraphBLAS-Concepts","page":"Introduction","title":"GraphBLAS Concepts","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The three primary components of GraphBLAS are: matrices, operators, and operations. Operators include monoids, binary operators, and semirings. Operations include the typical linear algebraic operations like matrix multiplication as well as indexing operations.","category":"page"},{"location":"#GBArrays","page":"Introduction","title":"GBArrays","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"SuiteSparseGraphBLAS.jl provides GBVector and GBMatrix array types which are subtypes of SparseArrays.AbstractSparseVector and SparseArrays.AbstractSparseMatrix respectively. Both can be constructed with no arguments to use the maximum size.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> GBVector{Float64}()\n1152921504606846976x1 GraphBLAS double vector, sparse by col\n  no entries\n\n1152921504606846976x1152921504606846976 GraphBLAS int8_t matrix, hypersparse by col\n  no entries","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"GraphBLAS array types are opaque to the user in order to allow the library author to choose the best storage format. SuiteSparse:GraphBLAS takes advantage of this by storing matrices in one of four formats: dense, bitmap, sparse-compressed, or hypersparse-compressed; and in either row or column major orientation. SuiteSparseGraphBLAS.jl sets the default to column major to ensure fast imports and exports.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"A complete list of construction methods can be found in Construction, but the matrix and vector above can be constructed as follows:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> A = GBMatrix([1,1,2,2,3,4,4,5,6,7,7,7], [2,4,5,7,6,1,3,6,3,3,4,5], [1:12...])\n7x7 GraphBLAS int64_t matrix, bitmap by col\n  12 entries\n\n    (3,0)   6\n    (0,1)   1\n    (3,2)   7\n    (5,2)   9\n    (6,2)   10\n    (0,3)   2\n    (6,3)   11\n    (1,4)   3\n    (6,4)   12\n    (2,5)   5\n    (4,5)   8\n    (1,6)   4\n\nv = GBVector([4], [10])\n4x1 GraphBLAS int64_t vector, bitmap by col\n  1 entry\n\n    (3,0)   10","category":"page"},{"location":"#GraphBLAS-Operations","page":"Introduction","title":"GraphBLAS Operations","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A complete list of supported operations can be found in Operations. GraphBLAS operations are, where possible, wrapped in existing Julia functions. The equivalent Julia functions are:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"GraphBLAS Operation Julia\nmxm, mxv, vxm bf C langle M rangle = C odot AB mul!, mul\n  \n  ","category":"page"},{"location":"arrays/#GBArrays","page":"Arrays","title":"GBArrays","text":"","category":"section"},{"location":"arrays/#Construction","page":"Arrays","title":"Construction","text":"","category":"section"},{"location":"operations/#Operations","page":"Operations","title":"Operations","text":"","category":"section"}]
}
