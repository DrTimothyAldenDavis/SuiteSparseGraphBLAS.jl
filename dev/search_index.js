var documenterSearchIndex = {"docs":
[{"location":"#SuiteSparseGraphBLAS.jl-1","page":"Home","title":"SuiteSparseGraphBLAS.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"SuiteSparseGraphBLAS.jl is a Julia wrapper for the SuiteSparse:GraphBLAS C library.","category":"page"},{"location":"context_methods/#Context-methods-1","page":"Context methods","title":"Context methods","text":"","category":"section"},{"location":"context_methods/#","page":"Context methods","title":"Context methods","text":"GrB_init\nGrB_finalize","category":"page"},{"location":"context_methods/#SuiteSparseGraphBLAS.GrB_init","page":"Context methods","title":"SuiteSparseGraphBLAS.GrB_init","text":"GrB_init(mode)\n\nGrBinit must called before any other GraphBLAS operation. GrBinit defines the mode that GraphBLAS will use: blocking or non-blocking. With blocking mode, all operations finish before returning to the user application. With non-blocking mode, operations can be left pending, and are computed only when needed.\n\n\n\n\n\n","category":"function"},{"location":"context_methods/#SuiteSparseGraphBLAS.GrB_finalize","page":"Context methods","title":"SuiteSparseGraphBLAS.GrB_finalize","text":"GrB_finalize()\n\nGrBfinalize must be called as the last GraphBLAS operation. GrBfinalize does not call GrB_wait; any pending computations are abandoned.\n\n\n\n\n\n","category":"function"},{"location":"matrix_and_vector_methods/#Matrix-functions-1","page":"Basic matrix & vector methods","title":"Matrix functions","text":"","category":"section"},{"location":"matrix_and_vector_methods/#","page":"Basic matrix & vector methods","title":"Basic matrix & vector methods","text":"Modules = [SuiteSparseGraphBLAS]\nPages   = [\n    \"Object_Methods/Matrix_Methods.jl\",\n]\nPrivate = false","category":"page"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Matrix_build-Union{Tuple{T}, Tuple{U}, Tuple{GrB_Matrix{T},Array{U,1},Array{U,1},Array{T,1},U,GrB_BinaryOp}} where T<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8} where U<:Union{Int64, UInt64}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Matrix_build","text":"GrB_Matrix_build(C, I, J, X, nvals, dup)\n\nStore elements from tuples into a matrix.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> MAT = GrB_Matrix{Int8}()\nGrB_Matrix{Int8}\n\njulia> GrB_Matrix_new(MAT, GrB_INT8, 4, 4)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [1, 2, 2, 2, 3]; J = [1, 2, 1, 3, 3]; X = Int8[2, 3, 4, 5, 6]; n = 5;\n\njulia> GrB_Matrix_build(MAT, I, J, X, n, GrB_FIRST_INT8)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> @GxB_Matrix_fprint(MAT, GxB_COMPLETE)\n\nGraphBLAS matrix: MAT\nnrows: 4 ncols: 4 max # entries: 5\nformat: standard CSR vlen: 4 nvec_nonempty: 3 nvec: 4 plen: 4 vdim: 4\nhyper_ratio 0.0625\nGraphBLAS type:  int8_t size: 1\nnumber of entries: 5\nrow: 1 : 1 entries [0:0]\n    column 1: int8 2\nrow: 2 : 3 entries [1:3]\n    column 1: int8 4\n    column 2: int8 3\n    column 3: int8 5\nrow: 3 : 1 entries [4:4]\n    column 3: int8 6\n\n\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Matrix_clear-Tuple{GrB_Matrix}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Matrix_clear","text":"GrB_Matrix_clear(A)\n\nRemove all elements from a matrix.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> MAT = GrB_Matrix{Int8}()\nGrB_Matrix{Int8}\n\njulia> GrB_Matrix_new(MAT, GrB_INT8, 4, 4)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [1, 2, 2, 2, 3]; J = [1, 2, 1, 3, 3]; X = Int8[2, 3, 4, 5, 6]; n = 5;\n\njulia> GrB_Matrix_build(MAT, I, J, X, n, GrB_FIRST_INT8)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Matrix_nvals(MAT)\n5\n\njulia> GrB_Matrix_clear(MAT)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Matrix_nvals(MAT)\n0\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Matrix_dup-Union{Tuple{T}, Tuple{GrB_Matrix{T},GrB_Matrix{T}}} where T<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Matrix_dup","text":"GrB_Matrix_dup(C, A)\n\nCreate a new matrix with the same domain, dimensions, and contents as another matrix.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> MAT = GrB_Matrix{Int8}()\nGrB_Matrix{Int8}\n\njulia> GrB_Matrix_new(MAT, GrB_INT8, 4, 4)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [1, 2, 2, 2, 3]; J = [1, 2, 1, 3, 3]; X = Int8[2, 3, 4, 5, 6]; n = 5;\n\njulia> GrB_Matrix_build(MAT, I, J, X, n, GrB_FIRST_INT8)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> B = GrB_Matrix{Int8}()\nGrB_Matrix{Int8}\n\njulia> GrB_Matrix_dup(B, MAT)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> @GxB_Matrix_fprint(B, GxB_SHORT)\n\nGraphBLAS matrix: B\nnrows: 4 ncols: 4 max # entries: 5\nformat: standard CSR vlen: 4 nvec_nonempty: 3 nvec: 4 plen: 4 vdim: 4\nhyper_ratio 0.0625\nGraphBLAS type:  int8_t size: 1\nnumber of entries: 5\nrow: 1 : 1 entries [0:0]\n    column 1: int8 2\nrow: 2 : 3 entries [1:3]\n    column 1: int8 4\n    column 2: int8 3\n    column 3: int8 5\nrow: 3 : 1 entries [4:4]\n    column 3: int8 6\n\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Matrix_extractElement-Union{Tuple{T}, Tuple{U}, Tuple{GrB_Matrix{T},U,U}} where T<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8} where U<:Union{Int64, UInt64}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Matrix_extractElement","text":"GrB_Matrix_extractElement(A, row_index, col_index)\n\nReturn element of a matrix at a given index (A[rowindex][colindex]) if successful. Else return value of type GrB Info.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> MAT = GrB_Matrix{Int8}()\nGrB_Matrix{Int8}\n\njulia> GrB_Matrix_new(MAT, GrB_INT8, 4, 4)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [1, 2, 2, 2, 3]; J = [1, 2, 1, 3, 3]; X = Int8[2, 3, 4, 5, 6]; n = 5;\n\njulia> GrB_Matrix_build(MAT, I, J, X, n, GrB_FIRST_INT8)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Matrix_extractElement(MAT, 1, 1)\n2\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Matrix_extractTuples-Union{Tuple{GrB_Matrix{T}}, Tuple{T}} where T<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Matrix_extractTuples","text":"GrB_Matrix_extractTuples(A)\n\nReturn tuples stored in a matrix.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> MAT = GrB_Matrix{Int8}()\nGrB_Matrix{Int8}\n\njulia> GrB_Matrix_new(MAT, GrB_INT8, 4, 4)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [1, 2, 2, 2, 3]; J = [1, 2, 1, 3, 3]; X = Int8[2, 3, 4, 5, 6]; n = 5;\n\njulia> GrB_Matrix_build(MAT, I, J, X, n, GrB_FIRST_INT8)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Matrix_extractTuples(MAT)\n([1, 2, 2, 2, 3], [1, 1, 2, 3, 3], Int8[2, 4, 3, 5, 6])\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Matrix_ncols-Tuple{GrB_Matrix}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Matrix_ncols","text":"GrB_Matrix_ncols(A)\n\nReturn the number of columns in a matrix if successful. Else return value of type GrB Info.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> MAT = GrB_Matrix{Int8}()\nGrB_Matrix{Int8}\n\njulia> GrB_Matrix_new(MAT, GrB_INT8, 4, 4)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Matrix_ncols(MAT)\n4\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Matrix_new-Union{Tuple{T}, Tuple{U}, Tuple{GrB_Matrix{T},GrB_Type{T},U,U}} where T<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8} where U<:Union{Int64, UInt64}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Matrix_new","text":"GrB_Matrix_new(A, type, nrows, ncols)\n\nCreate a new matrix with specified domain and dimensions.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> MAT = GrB_Matrix{Int8}()\nGrB_Matrix{Int8}\n\njulia> GrB_Matrix_new(MAT, GrB_INT8, 4, 4)\nGrB_SUCCESS::GrB_Info = 0\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Matrix_nrows-Tuple{GrB_Matrix}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Matrix_nrows","text":"GrB_Matrix_nrows(A)\n\nReturn the number of rows in a matrix if successful. Else return value of type GrB Info.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> MAT = GrB_Matrix{Int8}()\nGrB_Matrix{Int8}\n\njulia> GrB_Matrix_new(MAT, GrB_INT8, 4, 4)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Matrix_nrows(MAT)\n4\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Matrix_nvals-Tuple{GrB_Matrix}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Matrix_nvals","text":"GrB_Matrix_nvals(A)\n\nReturn the number of stored elements in a matrix if successful. Else return value of type GrB Info.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> MAT = GrB_Matrix{Int8}()\nGrB_Matrix{Int8}\n\njulia> GrB_Matrix_new(MAT, GrB_INT8, 4, 4)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [1, 2, 2, 2, 3]; J = [1, 2, 1, 3, 3]; X = Int8[2, 3, 4, 5, 6]; n = 5;\n\njulia> GrB_Matrix_build(MAT, I, J, X, n, GrB_FIRST_INT8)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Matrix_nvals(MAT)\n5\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Matrix_setElement-Union{Tuple{T}, Tuple{U}, Tuple{GrB_Matrix{T},T,U,U}} where T<:Union{Bool, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8} where U<:Union{Int64, UInt64}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Matrix_setElement","text":"GrB_Matrix_setElement(C, X, I, J)\n\nSet one element of a matrix to a given value, C[I][J] = X.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> MAT = GrB_Matrix{Int8}()\nGrB_Matrix{Int8}\n\njulia> GrB_Matrix_new(MAT, GrB_INT8, 4, 4)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [1, 2, 2, 2, 3]; J = [1, 2, 1, 3, 3]; X = Int8[2, 3, 4, 5, 6]; n = 5;\n\n\njulia> GrB_Matrix_build(MAT, I, J, X, n, GrB_FIRST_INT8)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Matrix_extractElement(MAT, 1, 1)\n2\n\njulia> GrB_Matrix_setElement(MAT, Int8(7), 1, 1)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Matrix_extractElement(MAT, 1, 1)\n7\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#Vector-functions-1","page":"Basic matrix & vector methods","title":"Vector functions","text":"","category":"section"},{"location":"matrix_and_vector_methods/#","page":"Basic matrix & vector methods","title":"Basic matrix & vector methods","text":"Modules = [SuiteSparseGraphBLAS]\nPages   = [\n    \"Object_Methods/Vector_Methods.jl\",\n]\nPrivate = false","category":"page"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Vector_build-Union{Tuple{T}, Tuple{U}, Tuple{GrB_Vector{T},Array{U,1},Array{T,1},U,GrB_BinaryOp}} where T<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8} where U<:Union{Int64, UInt64}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Vector_build","text":"GrB_Vector_build(w, I, X, nvals, dup)\n\nStore elements from tuples into a vector.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> V = GrB_Vector{Float64}()\nGrB_Vector{Float64}\n\njulia> GrB_Vector_new(V, GrB_FP64, 4)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [0, 2, 3]; X = [2.1, 3.2, 4.4]; n = 3;\n\njulia> GrB_Vector_build(V, I, X, n, GrB_FIRST_FP64)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> @GxB_Vector_fprint(V, GxB_SHORT)\n\nGraphBLAS vector: V\nnrows: 4 ncols: 1 max # entries: 3\nformat: standard CSC vlen: 4 nvec_nonempty: 1 nvec: 1 plen: 1 vdim: 1\nhyper_ratio 0.0625\nGraphBLAS type:  double size: 8\nnumber of entries: 3\ncolumn: 0 : 3 entries [0:2]\n    row 0: double 2.1\n    row 2: double 3.2\n    row 3: double 4.4\n\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Vector_clear-Tuple{GrB_Vector}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Vector_clear","text":"GrB_Vector_clear(v)\n\nRemove all the elements (tuples) from a vector.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> V = GrB_Vector{Int64}()\nGrB_Vector{Int64}\n\njulia> GrB_Vector_new(V, GrB_INT64, 5)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [1, 2, 4]; X = [2, 32, 4]; n = 3;\n\njulia> GrB_Vector_build(V, I, X, n, GrB_FIRST_INT64)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Vector_extractTuples(V)\n([1, 2, 4], [2, 32, 4])\n\njulia> GrB_Vector_clear(V)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Vector_extractTuples(V)\n(Int64[], Int64[])\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Vector_dup-Union{Tuple{T}, Tuple{GrB_Vector{T},GrB_Vector{T}}} where T<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Vector_dup","text":"GrB_Vector_dup(w, u)\n\nCreate a new vector with the same domain, size, and contents as another vector.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> V = GrB_Vector{Int64}()\nGrB_Vector{Int64}\n\njulia> GrB_Vector_new(V, GrB_INT64, 5)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [1, 2, 4]; X = [2, 32, 4]; n = 3;\n\njulia> GrB_Vector_build(V, I, X, n, GrB_FIRST_INT64)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> B = GrB_Vector{Int64}()\nGrB_Vector{Int64}\n\njulia> GrB_Vector_dup(B, V)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> @GxB_Vector_fprint(B, GxB_SHORT)\n\nGraphBLAS vector: B\nnrows: 5 ncols: 1 max # entries: 3\nformat: standard CSC vlen: 5 nvec_nonempty: 1 nvec: 1 plen: 1 vdim: 1\nhyper_ratio 0.0625\nGraphBLAS type:  int64_t size: 8\nnumber of entries: 3\ncolumn: 0 : 3 entries [0:2]\n    row 1: int64 2\n    row 2: int64 32\n    row 4: int64 4\n\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Vector_extractElement-Union{Tuple{U}, Tuple{T}, Tuple{GrB_Vector{T},U}} where U<:Union{Int64, UInt64} where T<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Vector_extractElement","text":"GrB_Vector_extractElement(v, i)\n\nReturn element of a vector at a given index (v[i]) if successful. Else return value of type GrB Info.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> V = GrB_Vector{Float64}()\nGrB_Vector{Float64}\n\njulia> GrB_Vector_new(V, GrB_FP64, 4)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [0, 2, 3]; X = [2.1, 3.2, 4.4]; n = 3;\n\njulia> GrB_Vector_build(V, I, X, n, GrB_FIRST_FP64)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Vector_extractElement(V, 2)\n3.2\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Vector_extractTuples-Union{Tuple{GrB_Vector{T}}, Tuple{T}} where T<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Vector_extractTuples","text":"GrB_Vector_extractTuples(v)\n\nReturn tuples stored in a vector.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> V = GrB_Vector{Float64}()\nGrB_Vector{Float64}\n\njulia> GrB_Vector_new(V, GrB_FP64, 4)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [0, 2, 3]; X = [2.1, 3.2, 4.4]; n = 3;\n\njulia> GrB_Vector_build(V, I, X, n, GrB_FIRST_FP64)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Vector_extractTuples(V)\n([0, 2, 3], [2.1, 3.2, 4.4])\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Vector_new-Union{Tuple{T}, Tuple{U}, Tuple{GrB_Vector{T},GrB_Type{T},U}} where T<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8} where U<:Union{Int64, UInt64}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Vector_new","text":"GrB_Vector_new(v, type, n)\n\nCreate a new vector with specified domain and size.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> V = GrB_Vector{Float64}()\nGrB_Vector{Float64}\n\njulia> GrB_Vector_new(V, GrB_FP64, 4)\nGrB_SUCCESS::GrB_Info = 0\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Vector_nvals-Tuple{GrB_Vector}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Vector_nvals","text":"GrB_Vector_nvals(v)\n\nReturn the number of stored elements in a vector if successful. Else return value of type GrB Info.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> V = GrB_Vector{Float64}()\nGrB_Vector{Float64}\n\njulia> GrB_Vector_new(V, GrB_FP64, 4)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [0, 2, 3]; X = [2.1, 3.2, 4.4]; n = 3;\n\njulia> GrB_Vector_build(V, I, X, n, GrB_FIRST_FP64)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Vector_nvals(V)\n3\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Vector_setElement-Union{Tuple{T}, Tuple{U}, Tuple{GrB_Vector{T},T,U}} where T<:Union{Bool, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8} where U<:Union{Int64, UInt64}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Vector_setElement","text":"GrB_Vector_setElement(w, x, i)\n\nSet one element of a vector to a given value, w[i] = x.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> V = GrB_Vector{Int64}()\nGrB_Vector{Int64}\n\njulia> GrB_Vector_new(V, GrB_INT64, 5)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [1, 2, 4]; X = [2, 32, 4]; n = 3;\n\njulia> GrB_Vector_build(V, I, X, n, GrB_FIRST_INT64)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Vector_extractElement(V, 2)\n32\n\njulia> GrB_Vector_setElement(V, 7, 2)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Vector_extractElement(V, 2)\n7\n\n\n\n\n\n","category":"method"},{"location":"matrix_and_vector_methods/#SuiteSparseGraphBLAS.GrB_Vector_size-Tuple{GrB_Vector}","page":"Basic matrix & vector methods","title":"SuiteSparseGraphBLAS.GrB_Vector_size","text":"GrB_Vector_size(v)\n\nReturn the size of a vector if successful. Else return value of type GrB Info.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> V = GrB_Vector{Float64}()\nGrB_Vector{Float64}\n\njulia> GrB_Vector_new(V, GrB_FP64, 4)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [0, 2, 3]; X = [2.1, 3.2, 4.4]; n = 3;\n\njulia> GrB_Vector_build(V, I, X, n, GrB_FIRST_FP64)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Vector_size(V)\n4\n\n\n\n\n\n","category":"method"},{"location":"algebra_methods/#Algebra-methods-1","page":"Operators & algebraic structures","title":"Algebra methods","text":"","category":"section"},{"location":"algebra_methods/#","page":"Operators & algebraic structures","title":"Operators & algebraic structures","text":"Modules = [SuiteSparseGraphBLAS]\nPages   = [\n    \"Object_Methods/Algebra_Methods.jl\",\n]\nPrivate = false","category":"page"},{"location":"algebra_methods/#SuiteSparseGraphBLAS.GrB_BinaryOp_new-Union{Tuple{V}, Tuple{U}, Tuple{T}, Tuple{GrB_BinaryOp,Function,GrB_Type{T},GrB_Type{U},GrB_Type{V}}} where V<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8} where U<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8} where T<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8}","page":"Operators & algebraic structures","title":"SuiteSparseGraphBLAS.GrB_BinaryOp_new","text":"GrB_BinaryOp_new(op, fn, ztype, xtype, ytype)\n\nInitialize a new GraphBLAS binary operator with a specified user-defined function and its types.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> V = GrB_Vector{Float64}()\nGrB_Vector{Float64}\n\njulia> GrB_Vector_new(V, GrB_FP64, 4)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [0, 0, 3, 3]; X = [2.1, 3.2, 4.5, 5.0]; n = 4;  # two values at position 0 and 3\n\njulia> dup = GrB_BinaryOp()  # dup is a binary operator which is applied when duplicate values for the same location are present in the vector\nGrB_BinaryOp\n\njulia> function ADD(b, c)\n           return b+c\n       end\nADD (generic function with 1 method)\n\njulia> GrB_BinaryOp_new(dup, ADD, GrB_FP64, GrB_FP64, GrB_FP64)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Vector_build(V, I, X, n, dup)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> @GxB_Vector_fprint(V, GxB_SHORT) # the value stored at position 0 and 3 will be the sum of the duplicate values\n\nGraphBLAS vector: V\nnrows: 4 ncols: 1 max # entries: 2\nformat: standard CSC vlen: 4 nvec_nonempty: 1 nvec: 1 plen: 1 vdim: 1\nhyper_ratio 0.0625\nGraphBLAS type:  double size: 8\nnumber of entries: 2\ncolumn: 0 : 2 entries [0:1]\n    row 0: double 5.3\n    row 3: double 9.5\n\n\n\n\n\n\n","category":"method"},{"location":"algebra_methods/#SuiteSparseGraphBLAS.GrB_Monoid_new-Union{Tuple{T}, Tuple{GrB_Monoid,GrB_BinaryOp,T}} where T<:Union{Bool, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8}","page":"Operators & algebraic structures","title":"SuiteSparseGraphBLAS.GrB_Monoid_new","text":"GrB_Monoid_new(monoid, binary_op, identity)\n\nCreate a new monoid with specified binary operator and identity value.\n\n\n\n\n\n","category":"method"},{"location":"algebra_methods/#SuiteSparseGraphBLAS.GrB_Semiring_new-Tuple{GrB_Semiring,GrB_Monoid,GrB_BinaryOp}","page":"Operators & algebraic structures","title":"SuiteSparseGraphBLAS.GrB_Semiring_new","text":"GrB_Semiring_new(semiring, monoid, binary_op)\n\nCreate a new semiring with specified monoid and binary operator.\n\n\n\n\n\n","category":"method"},{"location":"algebra_methods/#SuiteSparseGraphBLAS.GrB_UnaryOp_new-Union{Tuple{U}, Tuple{T}, Tuple{GrB_UnaryOp,Function,GrB_Type{T},GrB_Type{U}}} where U<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8} where T<:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8}","page":"Operators & algebraic structures","title":"SuiteSparseGraphBLAS.GrB_UnaryOp_new","text":"GrB_UnaryOp_new(op, fn, ztype, xtype)\n\nInitialize a new GraphBLAS unary operator with a specified user-defined function and its types.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> u = GrB_Vector{Int64}()\nGrB_Vector{Int64}\n\njulia> GrB_Vector_new(u, GrB_INT64, 3)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> I = [0, 2]; X = [10, 20]; n = 2;\n\njulia> GrB_Vector_build(u, I, X, n, GrB_FIRST_INT64)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> w = GrB_Vector{Int64}()\nGrB_Vector{Int64}\n\njulia> GrB_Vector_new(w, GrB_INT64, 3)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> function NEG(a)\n           return -a\n       end\nNEG (generic function with 1 method)\n\njulia> negative = GrB_UnaryOp()\nGrB_UnaryOp\n\njulia> GrB_UnaryOp_new(negative, NEG, GrB_INT64, GrB_INT64)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_apply(w, GrB_NULL, GrB_NULL, negative, u, GrB_NULL)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> @GxB_fprint(w, GxB_COMPLETE)\n\nGraphBLAS vector: w \nnrows: 3 ncols: 1 max # entries: 2\nformat: standard CSC vlen: 3 nvec_nonempty: 1 nvec: 1 plen: 1 vdim: 1\nhyper_ratio 0.0625\nGraphBLAS type:  int64_t size: 8\nnumber of entries: 2 \ncolumn: 0 : 2 entries [0:1]\n    row 0: int64 -10\n    row 2: int64 -20\n\n\n\n\n\n\n","category":"method"},{"location":"desc_methods/#Descriptor-methods-1","page":"Descriptors","title":"Descriptor methods","text":"","category":"section"},{"location":"desc_methods/#","page":"Descriptors","title":"Descriptors","text":"Modules = [SuiteSparseGraphBLAS]\nPages   = [\n    \"Object_Methods/Descriptor_Methods.jl\",\n]\nPrivate = false","category":"page"},{"location":"desc_methods/#SuiteSparseGraphBLAS.GrB_Descriptor_new-Tuple{GrB_Descriptor}","page":"Descriptors","title":"SuiteSparseGraphBLAS.GrB_Descriptor_new","text":"GrB_Descriptor_new(desc)\n\nCreate a new (empty or default) descriptor.\n\n\n\n\n\n","category":"method"},{"location":"desc_methods/#SuiteSparseGraphBLAS.GrB_Descriptor_set-Tuple{GrB_Descriptor,GrB_Desc_Field,GrB_Desc_Value}","page":"Descriptors","title":"SuiteSparseGraphBLAS.GrB_Descriptor_set","text":"GrB_Descriptor_set(desc, field, val)\n\nSet the content for a field for an existing descriptor.\n\n\n\n\n\n","category":"method"},{"location":"free_methods/#Free-methods-1","page":"Freeing objects","title":"Free methods","text":"","category":"section"},{"location":"free_methods/#","page":"Freeing objects","title":"Freeing objects","text":"Modules = [SuiteSparseGraphBLAS]\nPages   = [\n    \"Object_Methods/Free_Objects.jl\",\n]\nPrivate = false","category":"page"},{"location":"free_methods/#SuiteSparseGraphBLAS.GrB_BinaryOp_free-Tuple{GrB_BinaryOp}","page":"Freeing objects","title":"SuiteSparseGraphBLAS.GrB_BinaryOp_free","text":"GrB_BinaryOp_free(binaryop)\n\nFree binary operator.\n\n\n\n\n\n","category":"method"},{"location":"free_methods/#SuiteSparseGraphBLAS.GrB_Descriptor_free-Tuple{GrB_Descriptor}","page":"Freeing objects","title":"SuiteSparseGraphBLAS.GrB_Descriptor_free","text":"GrB_Descriptor_free(desc)\n\nFree descriptor.\n\n\n\n\n\n","category":"method"},{"location":"free_methods/#SuiteSparseGraphBLAS.GrB_Matrix_free-Tuple{GrB_Matrix}","page":"Freeing objects","title":"SuiteSparseGraphBLAS.GrB_Matrix_free","text":"GrB_Matrix_free(A)\n\nFree matrix.\n\n\n\n\n\n","category":"method"},{"location":"free_methods/#SuiteSparseGraphBLAS.GrB_Monoid_free-Tuple{GrB_Monoid}","page":"Freeing objects","title":"SuiteSparseGraphBLAS.GrB_Monoid_free","text":"GrB_Monoid_free(monoid)\n\nFree monoid.\n\n\n\n\n\n","category":"method"},{"location":"free_methods/#SuiteSparseGraphBLAS.GrB_Semiring_free-Tuple{GrB_Semiring}","page":"Freeing objects","title":"SuiteSparseGraphBLAS.GrB_Semiring_free","text":"GrB_Semiring_free(semiring)\n\nFree semiring.\n\n\n\n\n\n","category":"method"},{"location":"free_methods/#SuiteSparseGraphBLAS.GrB_UnaryOp_free-Tuple{GrB_UnaryOp}","page":"Freeing objects","title":"SuiteSparseGraphBLAS.GrB_UnaryOp_free","text":"GrB_UnaryOp_free(unaryop)\n\nFree unary operator.\n\n\n\n\n\n","category":"method"},{"location":"free_methods/#SuiteSparseGraphBLAS.GrB_Vector_free-Tuple{GrB_Vector}","page":"Freeing objects","title":"SuiteSparseGraphBLAS.GrB_Vector_free","text":"GrB_Vector_free(v)\n\nFree vector.\n\n\n\n\n\n","category":"method"},{"location":"free_methods/#SuiteSparseGraphBLAS.GrB_free-Tuple{SuiteSparseGraphBLAS.GrB_Struct}","page":"Freeing objects","title":"SuiteSparseGraphBLAS.GrB_free","text":"GrB_free(object)\n\nGeneric method to free a GraphBLAS object.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> w = GrB_Vector{Int64}()\nGrB_Vector{Int64}\n\njulia> I = [0, 2, 4]; X = [10, 20, 30]; n = 3;\n\njulia> GrB_Vector_new(w, GrB_INT64, 5)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_Vector_build(w, I, X, n, GrB_FIRST_INT64)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> @GxB_fprint(w, GxB_COMPLETE)\n\nGraphBLAS vector: w\nnrows: 5 ncols: 1 max # entries: 3\nformat: standard CSC vlen: 5 nvec_nonempty: 1 nvec: 1 plen: 1 vdim: 1\nhyper_ratio 0.0625\nGraphBLAS type:  int64_t size: 8\nnumber of entries: 3\ncolumn: 0 : 3 entries [0:2]\n    row 0: int64 10\n    row 2: int64 20\n    row 4: int64 30\n\n\njulia> GrB_free(w)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> @GxB_fprint(w, GxB_COMPLETE)\n\nGraphBLAS vector: w NULL\n\n\n\n\n\n","category":"method"},{"location":"seq_ter/#Sequence-termination-1","page":"Sequence termination","title":"Sequence termination","text":"","category":"section"},{"location":"seq_ter/#","page":"Sequence termination","title":"Sequence termination","text":"GrB_wait\nGrB_error","category":"page"},{"location":"seq_ter/#SuiteSparseGraphBLAS.GrB_wait","page":"Sequence termination","title":"SuiteSparseGraphBLAS.GrB_wait","text":"GrB_wait()\n\nGrBwait forces all pending operations to complete. Blocking mode is as if GrBwait is called whenever a GraphBLAS method or operation returns to the user.\n\n\n\n\n\n","category":"function"},{"location":"seq_ter/#SuiteSparseGraphBLAS.GrB_error","page":"Sequence termination","title":"SuiteSparseGraphBLAS.GrB_error","text":"GrB_error()\n\nEach GraphBLAS method and operation returns a GrBInfo error code. GrBerror returns additional information on the error.\n\nExamples\n\njulia> using SuiteSparseGraphBLAS\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_SUCCESS::GrB_Info = 0\n\njulia> GrB_init(GrB_NONBLOCKING)\nGrB_INVALID_VALUE::GrB_Info = 5\n\njulia> GrB_error()\nGraphBLAS error: GrB_INVALID_VALUE\nfunction: GrB_init (mode)\nGrB_init must not be called twice\n\n\n\n\n\n","category":"function"}]
}
